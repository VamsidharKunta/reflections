What happens when you initialize a repository? Why do you need to do it?
	
	On initalizing a repostory Git is notified of our need to create one and this allows the usage of all the git commands and features in said directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is a buffer zone to temporaryly store the file which are need to be part of the commit. It has a lot of value as it can help is extensive space saving and efficiency when only a few or only one file was changed in a certain commit as it gives us the option of only saving the file(s) changed thus saving space and reducing redundancy.

How can you use the staging area to make sure you have one commit per logical
change
	
	We can see the difference between the previous commit and the staging area using the git diff --staged command and confirm the we have made the logical change fo that commit.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branches can be helpfull in makink experimental changes while moving on with the working version unchanged. this can be very helpfull as we deal with the experimental version and working version seperatly and can merge them wehn needed.

How do the diagrams help you visualize the branch structure?
	
	Diagrams give us a visual description about the starting and endpoints of all the different branches and sub branches from the master branch. This information is vital to visualize the branch structure.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	Merging two brances together will creat a new commit under the master branch accounting for both the branches changes. We represent it the way we do because essentially we are merging the contents of a side branch into the main branch so we show it getting merged into the main branch in the diagram.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	
	The automatic merging feature in git is very convinient to use and gets the job done. Though we might face some issues if there are conflicting name is seperate parts of different part of two branches they wil mostly show up as conflits. This is more efficent than doing the procces manually especially if the changes made are many in number.